#!/usr/bin/env bash

set -eo pipefail

CACHE_DIR=~/.cache/archiveify
CLIENT_ID="f1cf4f52840941afa5bee3591a087194"
CLIENT_SECRET="37bec9897cd640df84e87d7c6efc05bb"

if [[ $# -eq 0 ]]; then
  printf 'No Spotify link given.\n'
  exit 1
else
  if ! [[ $1 =~ [Ss]potify ]]; then
    print 'Not a valid Spotify link.\n'
    exit 0
  else
    ID="$(sed -E 's|.*playlist[:/]([a-zA-Z0-9]+).*$|\1|' <<< "$1")"
  fi
fi

checkDeps() {
  for i in $1; do
    command -v $i >/dev/null 2>&1 ||
      printf '[i] This script requires "%s"\n' $i
  done
}

silent() {
  "$@" >/dev/null 2>&1
}

checkDeps "curl flac jq"

# Set the Spotify API endpoint for retrieving a token
TOKEN_ENDPOINT="https://accounts.spotify.com/api/token"

# Encode the client ID and secret in Base64
AUTH_HEADER="Authorization: Basic $(echo -n "$CLIENT_ID:$CLIENT_SECRET" | base64 -w 0)"

# Set the grant type to "client_credentials"
DATA="grant_type=client_credentials"

# Make a POST request to the token endpoint to retrieve a token
TOKEN_RESPONSE=$(curl -s -X POST -H "$AUTH_HEADER" -d "$DATA" "$TOKEN_ENDPOINT")

# Extract the access token from the response
ACCESS_TOKEN="$(jq -r '.access_token' <<< "$TOKEN_RESPONSE")"

DETAILS="$(curl -sS "https://api.spotify.com/v1/playlists/$ID?fields=name,tracks.total" \
  -H "Accept: application/json" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ACCESS_TOKEN"
  )"

PLAYLIST="$(jq -r .name <<< "$DETAILS")"
TOTAL="$(jq -r .tracks.total <<< "$DETAILS")"

mkdir -p "${CACHE_DIR}/${PLAYLIST}"

n=$(( TOTAL / 100 ))
for i in $(seq 0 100 ${n}00); do
  curl -sS -X "GET" "https://api.spotify.com/v1/playlists/$ID/tracks?offset=$i&limit=100" \
    -H "Accept: application/json" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $ACCESS_TOKEN" |
    jq -r '.items[].track |  "\(.album.artists[].name) - \(.name) | \(.external_ids.isrc)"' \
      >> "${CACHE_DIR}/${PLAYLIST}/tracks.txt"
done

while read -r line; do
  track=$(echo "$line" | cut -d\| -f1 | xargs)
  isrc=$(echo "$line" | cut -d\| -f2 | xargs)
  tracks="$(curl -sS https://slavart.gamesdrive.net/api/search\?q=$isrc)"
  total=$(jq -r '.tracks.total' <<< "$tracks")
  if [[ $total -eq 0 ]]; then
    printf 'Couldn'\''t find "%s"\n' "$track"
  else
    artist="$(jq -r .tracks.items[0].performer.name <<< "$tracks")"
    # artist="$(jq -r .tracks.items[0].album.artist.name <<< "$tracks")"
    title="$(jq -r .tracks.items[0].title <<< "$tracks")"
    filename="${artist} - ${title}"
    if [[ -f "${CACHE_DIR}/${PLAYLIST}/${filename}.flac" ]]; then
      silent flac -t "${CACHE_DIR}/${PLAYLIST}/${filename}.flac" && {
        printf 'Skipping "%s", already exists\n' "$filename"
        continue
      }
    fi
    printf 'Downloading "%s"...\n' "$filename"
    curl -# https://slavart-api.gamesdrive.net/api/download/track\?id="$(jq -r .tracks.items[0].id <<< "$tracks")" \
      -o "${CACHE_DIR}/${PLAYLIST}/${filename}.flac"
  fi
done < "${CACHE_DIR}/${PLAYLIST}/tracks.txt"

mkdir ~/"$PLAYLIST"

mv "${CACHE_DIR}/${PLAYLIST}"/*.flac ~/"$PLAYLIST"
